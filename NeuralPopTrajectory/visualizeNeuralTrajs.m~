function visualizeNeuralTrajs(filePath, fileNameNeuralTrj, saveNameTag, eventMarkersRelative, varargin)
%This function opens/visualizes the trial-by-trial neural
% population trajectories extracted using either pca or gpfa. 

cd(filePath)
p = parse_input_visualizeNeuralTrajs( filePath, fileNameNeuralTrj, fileNameBeh, saveNameTag, eventMarkersRelative, reachTimeWin, lickTimeWin, varargin );
% p = parse_input_corrNeuralTrajMovKinematics( filePath, fileNameNeuralTrj, fileNameBeh, saveNameTag, eventMarkersRelative, reachTimeWin, lickTimeWin, {} );

%% load/organize neural trjectories pca- or gpfa-based
neuralTrajFile = dir(fullfile(filePath,fileNameNeuralTrj));
load(neuralTrajFile.name,'pcaResult')
nTrj.trjMat = reshape([pcaResult.kern.seqTrain.xpost], pcaResult.p.Results.pcaDim, [], length(pcaResult.kern.seqTrain)); % neural trajectories in dim x timeBins x trials (e.g. 5x100x114)
nTrj.trialId = [pcaResult.kern.seqTrain.trialId]; % trial IDs for the neural trjectories

nTrj.relativeTimeBins = pcaResult.p.Results.timeRange(1):pcaResult.p.Results.pcaBinSize:pcaResult.p.Results.timeRange(2)-pcaResult.p.Results.pcaBinSize; % get timeBins relative to time 0 (e.g. reward) of the current PSTH
nTrj.neuralTrajFile = neuralTrajFile; % to keep track of the neural trajectory files
nTrj.pcaRez = pcaResult.kern; % pca info pc loadings, eigVals, expVar 

cd(fullfile(filePath,'Figure'))

cmap = TNC_CreateRBColormap(100,'rb'); % get a colormap for imagesc psth
figure;
rMaxPosSig = zeros(size(nTrj.pMaxPos,1), size(nTrj.pMaxPos,2));
rMaxPosSig(nTrj.pMaxPos<p.Results.alpha) = nTrj.rMaxPos(nTrj.pMaxPos<p.Results.alpha);
imagescJP(rMaxPosSig',cmap,[-0.8 0.8]);
pbaspect([1 1 1]); colorbar;
title(strcat('CorrPCscrDimMaxPos_',saveNameTag),'Interpreter', 'none');
set(gca,'yTick',1:1:size(nTrj.rMaxPos',1)); % plot the corr between nTrj and maxPos dim-by-dim
print(strcat(saveNameTag,'_corrPCscrDimMaxPos'),'-dpdf');


%% plot rank-folded neural population trajectories
% plot principal components
%plot(pcaResult.kern.estParams.L(:,1)) % the 1st principal component
%plotEachDimVsTime(pcaResult.kern.seqTrain, 'xpost', pcaResult.binWidth);

% plot trajectories
trFolds = floor(length(bTrj)/p.Results.trialFolds); % trial p.Results.trialFolds
sortMaxPos = sortrows([[bTrj.maxReachPos];[bTrj.trialId]]',-1); % sorted max reach positions in a descending order
sortMaxVel = sortrows([[bTrj.maxReachVel];[bTrj.trialId]]',-1); % sorted max reach velocities
sortLickCnt = sortrows([[bTrj.lickCount];[bTrj.trialId]]',-1);  % sorted trial lick counts

% get the trial-averaged neural population trajectories of each fold rank-ordered by a movement variable
for f = 0:p.Results.trialFolds-1
    if f<p.Results.trialFolds-1
        nTrj.sortedFoldMaxPos{f+1} = nTrj.trjMat(:,:,sortMaxPos(f*trFolds+1:(f+1)*trFolds,2)); % take the trials of the current fold sorted by the max position
        nTrj.sortedFoldMaxVel{f+1} = nTrj.trjMat(:,:,sortMaxVel(f*trFolds+1:(f+1)*trFolds,2)); % take the trials of the current fold sorted by the max velocity
        nTrj.sortedFoldLickCnt{f+1} = nTrj.trjMat(:,:,sortLickCnt(f*trFolds+1:(f+1)*trFolds,2)); % take the trials of the current fold sorted by the lick counts
    elseif f==p.Results.trialFolds-1 % take all the remaining trials for the final fold
        nTrj.sortedFoldMaxPos{f+1} = nTrj.trjMat(:,:,sortMaxPos(f*trFolds+1:end,2)); % take the trials of the current fold sorted by the max position
        nTrj.sortedFoldMaxVel{f+1} = nTrj.trjMat(:,:,sortMaxVel(f*trFolds+1:end,2)); % take the trials of the current fold sorted by the max velocity
        nTrj.sortedFoldLickCnt{f+1} = nTrj.trjMat(:,:,sortLickCnt(f*trFolds+1:end,2)); % take the trials of the current fold sorted by the lick counts
    end
end
clearvars f

eventMarkers = [1, arrayfun(@(x) find(x==nTrj.relativeTimeBins), eventMarkersRelative)]; % find the time bins corresponding to the event markers using the relative eventMarkers (e.g. [-1050 0]) given as the input

neuralTrajCmap1  = summer(p.Results.trialFolds); % get the colormap for fold-by-fold trial-averaged neural trajectories
neuralTrajCmap2  = spring(p.Results.trialFolds); % get the colormap for fold-by-fold trial-averaged neural trajectories

eventMarkerCmap = cool(length(eventMarkers)+1); % get the colormap for all the events to be marked

trAvgSortedFoldMaxPos = cellfun(@(x) nanmean(x(1:3,:,:),3), nTrj.sortedFoldMaxPos, 'UniformOutput', false); % take the trial-averaged neural trajectories of each fold based on the maxPos
trAvgSortedFoldMaxVel = cellfun(@(x) nanmean(x(1:3,:,:),3), nTrj.sortedFoldMaxVel, 'UniformOutput', false); % take the trial-averaged neural trajectories of each fold based on the maxPos
trAvgSortedFoldLickCnt = cellfun(@(x) nanmean(x(1:3,:,:),3), nTrj.sortedFoldLickCnt, 'UniformOutput', false); % take the trial-averaged neural trajectories of each fold based on the maxPos


plot3DneuralTrajAndEventMarkers( trAvgSortedFoldMaxPos, neuralTrajCmap1, eventMarkers, eventMarkerCmap, p.Results.lineWidth, p.Results.markerSize );  % plot the neural trajectories rank-ordered by the maxPos
title(strcat('trAvgSortedFoldMaxPos_',saveNameTag),'Interpreter', 'none')
if p.Results.saveNtrjFigs
    print(strcat(saveNameTag,'_trAvgSortedFoldMaxPos'),'-dpdf');
end


%% save
cd(filePath)
save(strcat(saveNameTag,'_nTrj_bTrj_Corr'),'nTrj','bTrj','p','sortMaxVel','sortMaxPos','sortLickCnt') % save the outcomes

%%%%%%%%%%%%%%%%%%%%%%%%%%%
% NESTED HELPER FUNCTIONS %
%%%%%%%%%%%%%%%%%%%%%%%%%%%
    function plot3DneuralTrajAndEventMarkers( neuralTrajCell, neuralTrajCmap, eventMarkers, eventMarkerCmap, lineWidth, markerSize )
        figure;
        hold on;
        for fd = 1:length(neuralTrajCell)
            plot3(neuralTrajCell{fd}(1,:),neuralTrajCell{fd}(2,:),neuralTrajCell{fd}(3,:),'LineWidth',lineWidth,'color',neuralTrajCmap(fd,:))
            for evt = 1:length(eventMarkers)
                plot3(neuralTrajCell{fd}(1,eventMarkers(evt)),neuralTrajCell{fd}(2,eventMarkers(evt)),neuralTrajCell{fd}(3,eventMarkers(evt)),'o','MarkerSize',markerSize, 'MarkerFaceColor',eventMarkerCmap(evt,:), 'MarkerEdgeColor',eventMarkerCmap(evt,:));
                plot3(neuralTrajCell{fd}(1,eventMarkers(evt)),neuralTrajCell{fd}(2,eventMarkers(evt)),neuralTrajCell{fd}(3,eventMarkers(evt)),'o','MarkerSize',markerSize, 'MarkerFaceColor',eventMarkerCmap(evt,:), 'MarkerEdgeColor',eventMarkerCmap(evt,:));
                plot3(neuralTrajCell{fd}(1,eventMarkers(evt)),neuralTrajCell{fd}(2,eventMarkers(evt)),neuralTrajCell{fd}(3,eventMarkers(evt)),'o','MarkerSize',markerSize, 'MarkerFaceColor',eventMarkerCmap(evt,:), 'MarkerEdgeColor',eventMarkerCmap(evt,:));
            end
        end
        hold off;
        pbaspect([1 1 1]); grid on;
        %s=inputname(1); % take the input variable name as a string
        %title(strcat(s));
        xlabel('Dim1'); ylabel('Dim2'); zlabel('Dim3')
    end


    function p = parse_input_visualizeNeuralTrajs( filePath, fileNameNeuralTrj, saveNameTag, eventMarkersRelative, vargs ) 
        %parse input, and extract name-value pairs for the main function 'corrNeuralTrajMovKinematics.m'
        
        default_whatToPlot = 'Trials'; 
        default_dimPlotBy = 1; % the default PC or GPFA dimension to sort the trials/folds by 
        default_numbTrials = 10; % # of trials to plot
        default_numbFolds = 4; % # of folds to plot
        default_lineWidth  = 2;  % default lineWidth to be used to plot the neural trajectories
        default_markerSize = 10; % default markerSize to be used to plot the neural trajectories
        default_saveNtrjFigs = false; % By default, there's no need to save the 3-d nTrj figures
        default_alpha = 0.05;  % default alpha value to just plot the significant correlations between neural population trajectories and the behavioral kinematics
        default_trajCmap = 'parula'; 
        
        p = inputParser; % create parser object
        
        addRequired(p,'filePath'); % file directory
        addRequired(p,'fileNameNeuralTrj'); % fileName for neural population trajectories
        addRequired(p,'saveNameTag'); % saveName used to save the outcomes
        addRequired(p,'eventMarkersRelative'); % timing for specific events to be marked on each neural trajectory
        
        addParameter(p,'whatToPlot', default_whatToPlot) % 
        addParameter(p,'numbTrials', default_numbTrials) % the # of trials to plot
        addParameter(p,'numbFolds', default_numbFolds) % the # of folds to plot
        addParameter(p,'dimPlotBy', default_dimPlotBy) % the default PC or GPFA dimension to sort the trials/folds by
        addParameter(p,'lineWidth', default_lineWidth)   % the lineWidth to be used to plot nTrjs
        addParameter(p,'markerSize', default_markerSize) % the markerSzie to be used to plot nTrjs
        addParameter(p,'saveNtrjFigs', default_saveNtrjFigs) % By default, there's no need to save the 3-d nTrj figures
        addParameter(p,'alpha', default_alpha) % By default, the alpha level of 0.01 is used as the criterion for significant correlations
        addPa
        
        parse(p, filePath, fileNameNeuralTrj, fileNameBeh, saveNameTag, eventMarkersRelative, reachTimeWin, lickTimeWin, vargs{:})
        
    end

end

