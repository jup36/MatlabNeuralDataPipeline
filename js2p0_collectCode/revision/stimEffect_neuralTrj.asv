% 

filePath = '/Volumes/Extreme SSD/js2p0/WR40_082019/Matfiles/js2p0_tbytSpkHandJsTrjBin_50ms_WR40_082019.mat'; 
load(fullfile(filePath), 'ss', 'jkvt')

%% get indices
% valid reach and pull trials (trials with valid hand trajectories)
valRchTrI = cellfun(@(a) ~isempty(a), {ss.spkRchIdx}); 
valPullTrI = cellfun(@(a) ~isempty(a), {ss.spkPullIdx}); 

% stim trials
stimTrI = cellfun(@(a) ~isempty(a), {ss.spkTimeBlaserI}); 
valStimTrI = stimTrI & valRchTrI & valPullTrI; 
valStimTrId = find(valStimTrI);  

% noStim trials
noStimTrI = cellfun(@(a) isempty(a), {ss.spkTimeBlaserI});
valNoStimTrI = noStimTrI & valRchTrI & valPullTrI;
valNoStimTrId = find(valNoStimTrI); 

stbLaserIC = {ss(valStimTrI).spkTimeBlaserI}; % spikeTimeBin laser index 
stbRchIC = {ss(valStimTrI).spkRchIdx}; % spikeTimeBin reach index
stbPullIC = {ss(valStimTrI).spkPullIdx}; % spikeTimeBin pull index

% check overlap between stim and reach and pull
laserRchIC = cellfun(@(a, b) a & b, stbLaserIC, stbRchIC, 'UniformOutput', false); 
cellfun(@sum, laserRchIC)

laserPullIC = cellfun(@(a, b) a & b, stbLaserIC, stbPullIC, 'UniformOutput', false); 
cellfun(@sum, laserPullIC)

%% RRR with trials without silencing
% build X (n x p matrix containing the residual activity of the source)
% population: M1) and Y (n x q matrix containing the residual activity of the target population: STR) matrices. 
[X.concat, X.numbUnit, X.numbTime, X.numbTrial] = concatUnitTimeBCell({ss(valNoStimTrId).unitTimeBCtx}); 
[Y.concat, Y.numbUnit, Y.numbTime, Y.numbTrial] = concatUnitTimeBCell({ss(valNoStimTrId).unitTimeBStr}); 

assert(size(X.concat, 1)==size(Y.concat, 1)); % they must have the same number of data points

[B, B_, V] = ReducedRankRegress(Y.concat, X.concat, 5, 'RIDGEINIT', true, 'SCALE', true); 
Yhat = [ones(size(X.concat,1),1) X.concat]*B; 

% reshape Yhat
function unitTimeBCell = reshapeYhatToUnitTimeBCell(Yhat_concat, numbUnit, numbTime, numbTrial)
rsArray = reshape(Yhat_concat, [numb])


end



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [concatMat, numbUnit, numbTime, numbTrial] = concatUnitTimeBCell(unitTimeBCell) 
numbTrial = length(unitTimeBCell); 

sizeCell = cellfun(@size, unitTimeBCell, 'UniformOutput', false); 
sizeMat = cell2mat(sizeCell(:)); 
assert(length(unique(sizeMat(:, 1)))==1); % ensure that the number of units match
assert(length(unique(sizeMat(:, 2)))==1); % ensure that the number of time points match

numbUnit = unique(sizeMat(:, 1)); 
numbTime = unique(sizeMat(:, 2)); 

concatMat = full(cell2mat(cellfun(@(a) a', unitTimeBCell, 'UniformOutput', false)'));
end

