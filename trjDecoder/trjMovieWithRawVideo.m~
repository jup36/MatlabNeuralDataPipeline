function trjMovieWithRawVideo(hTrjDir, movSaveDir, movSaveName)
%'trjMovie' takes a data matrix containing actual and estimated
% trajectories from cortical and striatal neural population activity
% (pltm), and generates a MPEG movies of those trajectories across time. 
% plotm is data matrix to be plotted: variable-by-time
%https://www.mathworks.com/help/matlab/import_export/convert-between-image-sequences-and-video.html

filePath = '/Volumes/Beefcake/Junchol_Data/JS2p0/WR40_082019/Matfiles'; 
cd(filePath)
%hTrjDir = '/Volumes/Beefcake/Junchol_Data/JS2p0/WR40_082019/082019_WR40'; 
%movSaveDir ='/Volumes/Beefcake/Junchol_Data/JS2p0/WR40_082019/Matfiles/Figure/KalmanFilter_decoding';
vfList = dir(hTrjDir); 

%% get s.dat from preprocessKFdecode*
kfDir = dir('rezKFdecodeHTrjCtxStrVel*'); 
load(fullfile(kfDir.folder,kfDir.name),'s')

valTrI = cell2mat(cellfun(@(a) ~isempty(a), s.dat.spkCtx, 'un', 0)); % valid trials
stmTrI = cell2mat(cellfun(@(a) sum(a)>=1, s.dat.laserIdx, 'un', 0)); % stim trials

behDir = dir('jsTime1k_KinematicsTrajectories*'); 
load(fullfile(behDir(1).folder,fullfile(behDir(1).name)),'jkvt'); 

currentFolder = pwd;
clearvars F

ax = 2; % axis of interest to plot (X:1,Y:2,Z:3)  

%% preprocess trjC
%trjC = cell(1,sum(sum(valTrI&~stmTrI))); 
stimeJkvtTr = [s.time.jkvtTr]; 
cnt = 0; 
for c = 1:size(s.dat.state,2)
    for r = 1:size(s.dat.state,1)
        if valTrI(r,c) && ~stmTrI(r,c)
            cnt = cnt + 1; % count valid no-stim trial
            tJkvt = s.dat.trialJkvt{r,c}; % trial in jkvt
            tmpI = stimeJkvtTr==tJkvt; 
            tmpTrjT = s.time(tmpI).t1R:20:s.time(tmpI).tE; 
            % get trajectories 
            tmpCtx = s.dat.stateCtx{r,c}(ax,:); 
            tmpStr = s.dat.stateStr{r,c}(ax,:); 
            tmpAct = s.dat.state{r,c}(ax,:);      
            trjS(cnt).stimeJkvtTr = find(stimeJkvtTr==tJkvt); 
            trjS(cnt).trjT = tmpTrjT(1:length(tmpCtx));              
            % video frames 
            tmpPath = jkvt(tJkvt).sVideoInfo.path; % just use the SIDE view video here          
            vName1 = strfind(tmpPath,'\cam1'); 
            vfListI = cell2mat(cellfun(@(a) strcmpi(a,tmpPath(vName1+1:end)), {vfList.name},'un',0)); 
            trjS(cnt).videoPath = fullfile(vfList(vfListI).folder, vfList(vfListI).name); 
            trjS(cnt).frmT = jkvt(tJkvt).vFrameTime; % frame time            
            trjS(cnt).frmI = trjS(cnt).trjT(1)<=trjS(cnt).frmT & trjS(cnt).frmT<=trjS(cnt).trjT(end); % frame index 
            trjS(cnt).frmT1rTe = trjS(cnt).frmT(trjS(cnt).frmI); % frame time within the T1R to Te range
            % interpolation and smoothing
            trjS(cnt).trjm = smooth2a(intm([tmpCtx; tmpStr; tmpAct], sum(trjS(cnt).frmI)),0,10); % cortex, striatum, actual hand trajectory 
        end
    end
end
clearvars c r jkvt

%% select trajectories with high Str-Act correlations
corrStrAct = cell2mat(cellfun(@(a) corr(a(2,:)',a(3,:)'), {trjS(:).trjm}, 'un', 0)); 
corrStrAct(2,:) = 1:length(corrStrAct); 
srtCorrsortrows(corrStrAct',-1)

%% generate a combined video 
colorMap = [[100 149 237]./255; [50 205 50]./255; [50 50 50]./255]; % colorMap for cortex and striatum
hold on; grid on;

title(movSaveName,'Interpreter','none');
set(gca,'xtick',[])
set(gca,'ytick',[])
%set(gca,'units','pixels','position',[100 100 1920 1080]); 

trjCtx = animatedline('LineWidth',2,'Color',colorMap(1,:),'MaximumNumPoints',300);
trjStr = animatedline('LineWidth',2,'Color',colorMap(2,:),'MaximumNumPoints',300);
trjAct = animatedline('LineWidth',2,'Color',colorMap(3,:),'MaximumNumPoints',300);

for j = 1:size(trjS,2)
    pltm = trjS(j).trjm; % current trial's hand trajectory (cortex, striatum, actual)
    vId = VideoReader(fullfile(trjS(j).videoPath));
    
    fr = 0;
    valPt = 0; 
    while hasFrame(vId) && fr<=size(trjS(j).frmT,2)
        fr = fr+1;
        img1 = readFrame(fvid); % hTrj raw video
        if trjS(j).frmI(fr)
            valPt = valPt+1; % valid frame that corresponds to a point in the trajectory
                % actual trj
                addpoints(trjAct, valPt, pltm(3,valPt));
                headAct = scatter(valPt,pltm(3,valPt),75,'filled','MarkerFaceColor',colorMap(3,:),'MarkerEdgeColor',colorMap(3,:));
                % cortex trj
                addpoints(trjCtx, valPt, pltm(1,valPt));
                headCtx = scatter(valPt,pltm(1,valPt),75,'filled','MarkerFaceColor',colorMap(1,:),'MarkerEdgeColor',colorMap(1,:));
                % striatum trj
                addpoints(trjStr, valPt, pltm(2,valPt));
                headStr = scatter(valPt,pltm(2,valPt),75,'filled','MarkerFaceColor',colorMap(2,:),'MarkerEdgeColor',colorMap(2,:));
                drawnow
                
                set(gcf,'PaperPositionMode','auto')
                tightfig(gcf) % set path for tightfig 
                tmpImg2Name = ['pltm' sprintf('%03d',valPt) '.jpg']; 
                print(fullfile(movSaveDir,tmpImg2Name),'-dpng','-r600')
                img2 = imread(fullfile(movSaveDir,tmpImg2Name));
                %J = imresize(I,[numrows numcols])
                %imshow(img2)
                
                print(fullfile(movSaveDir,),)
                
                
                F(valPt) = getframe(gcf);
  
                pltmImg = frame2im(F(valPt)); 
                imshow(pltmImg)
                
                pause(0.01);
                
                
                delete(headCtx); delete(headStr); delete(headAct);
        end
    end
end

cd(movSaveDir)
video = VideoWriter(movSaveName,'MPEG-4');
video.Quality = 100;
open(video)
writeVideo(video,F)
close(video)
cd(currentFolder)
end